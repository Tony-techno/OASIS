# -*- coding: utf-8 -*-
"""OASIS_Infobyte_Sentiment Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ULaoJOfMuaSyT5cPR4MdXKY3ZXS2tDzj

#**Sentiment Analysis**

Data Loading and Initial Inspection
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, confusion_matrix

"""Load the data"""

twitter_data = pd.read_csv('/content/Twitter_Data.csv')

apps = pd.read_csv('/content/apps.csv')

user_reviews = pd.read_csv('/content/user_reviews.csv')

"""Inspect the data"""

print(twitter_data.info())

print(twitter_data.describe())

print(twitter_data.dtypes)

print(twitter_data.head())

print(twitter_data.tail())

print(twitter_data.isnull())

print(twitter_data.isnull().sum())

print(twitter_data.isnull().sum().sum())

print(apps.info())

print(apps.describe())

print(apps.dtypes)

print(apps.head())

print(apps.tail())

print(apps.isnull())

print(apps.isnull().sum())

print(apps.isnull().sum().sum())

print(user_reviews.info())

print(user_reviews.describe())

print(user_reviews.dtypes)

print(user_reviews.head())

print(user_reviews.tail())

print(user_reviews.isnull())

print(user_reviews.isnull().sum())

print(user_reviews.isnull().sum().sum())

"""Data Cleaning

Dropping rows with missing values in Twitter data
"""

twitter_data.dropna(inplace=True)

"""Filling missing values in user reviews with empty strings or appropriate values"""

user_reviews['Translated_Review'].fillna('', inplace=True)
user_reviews['Sentiment'].fillna('Neutral', inplace=True)
user_reviews['Sentiment_Polarity'].fillna(0, inplace=True)
user_reviews['Sentiment_Subjectivity'].fillna(0, inplace=True)

"""Filling missing values in apps dataset with suitable replacements"""

apps['Rating'].fillna(apps['Rating'].mean(), inplace=True)
apps['Size'].fillna('Varies with device', inplace=True)
apps['Type'].fillna('Free', inplace=True)
apps['Current Ver'].fillna('Unknown', inplace=True)
apps['Android Ver'].fillna('Varies with device', inplace=True)

"""Verifying if missing values are handled"""

print(twitter_data.isnull().sum().sum())
print(user_reviews.isnull().sum().sum())
print(apps.isnull().sum().sum())

"""Exploratory Data Analysis (EDA)"""

plt.figure(figsize=(8,6))
sns.countplot(x='category', data=twitter_data)
plt.title('Sentiment Distribution in Twitter Data')
plt.show()

plt.figure(figsize=(8,6))
sns.histplot(apps['Rating'], bins=30, kde=True)
plt.title('Distribution of App Ratings')
plt.show()

plt.figure(figsize=(8,6))
sns.histplot(user_reviews['Sentiment_Polarity'], bins=30, kde=True)
plt.title('Distribution of Sentiment Polarity in User Reviews')
plt.show()

"""Feature Engineering

Feature engineering for Twitter data using TF-IDF Vectorizer
"""

vectorizer = TfidfVectorizer(max_features=5000, ngram_range=(1,2))
X_twitter = vectorizer.fit_transform(twitter_data['clean_text'])
y_twitter = twitter_data['category']

"""Splitting the Twitter data into training and testing sets"""

X_train_twitter, X_test_twitter, y_train_twitter, y_test_twitter = train_test_split(X_twitter, y_twitter, test_size=0.2, random_state=42)

"""Model Building and Evaluation

Training a Naive Bayes classifier for Twitter sentiment analysis
"""

model_nb = MultinomialNB()
model_nb.fit(X_train_twitter, y_train_twitter)

"""Making predictions"""

y_pred_twitter = model_nb.predict(X_test_twitter)

"""Evaluating the model"""

print(confusion_matrix(y_test_twitter, y_pred_twitter))

print(classification_report(y_test_twitter, y_pred_twitter))

"""Data Visualization of Results"""

conf_matrix = confusion_matrix(y_test_twitter, y_pred_twitter)
plt.figure(figsize=(8,6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Negative', 'Neutral', 'Positive'], yticklabels=['Negative', 'Neutral', 'Positive'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix for Twitter Sentiment Analysis')
plt.show()

"""Summary

The code implements a sentiment analysis pipeline for text data, focusing on Twitter data while also inspecting datasets for apps and user reviews. It begins by loading and inspecting the datasets, addressing missing values through various cleaning techniques. Exploratory Data Analysis (EDA) is conducted with visualizations to understand data distributions. Feature engineering is performed using TF-IDF vectorization on the Twitter text data. The sentiment analysis model is built using a Naive Bayes classifier, trained and evaluated with train-test split data. Model performance is assessed through a confusion matrix and classification report, with results visualized in a heatmap for clear interpretation.
"""