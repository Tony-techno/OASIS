# -*- coding: utf-8 -*-
"""OASIS_InfoByte_Unveiling_the_Android_App_Market_Analyzing_Google_Play_Store_Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vLRiVdMdK_ktHNudilSogBg0BZ0g9PwH

#**Unveiling the Android App Market: Analyzing Google Play Store Data**

Importing libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

"""Data Preparation

Load the datasets
"""

apps = pd.read_csv('/content/apps.csv')

user_reviews = pd.read_csv('/content/user_reviews.csv')

"""Display the initial structure and summary of the data"""

print(apps.shape)

print(apps.info())

print(apps.describe())

print(apps.dtypes)

print(apps.head())

print(apps.tail())

print(apps.isnull())

print(apps.isnull().sum())

print(apps.isnull().sum().sum())

print(user_reviews.shape)

print(user_reviews.info())

print(user_reviews.describe())

print(user_reviews.dtypes)

print(user_reviews.head())

print(user_reviews.tail())

print(user_reviews.isnull())

print(user_reviews.isnull().sum())

print(user_reviews.isnull().sum().sum())

"""Clean and Correct Data Types

Clean the 'Installs' column
"""

apps['Installs'] = apps['Installs'].astype(str).str.replace(',', '').str.replace('+', '').astype(int)

"""Clean the 'Price' column"""

apps['Price'] = apps['Price'].astype(str).str.replace('$', '').astype(float)

"""Convert 'Last Updated' to datetime"""

apps['Last Updated'] = pd.to_datetime(apps['Last Updated'])

"""Handling missing values"""

apps['Rating'].fillna(apps['Rating'].mean(), inplace=True)
apps['Size'].fillna(apps['Size'].mean(), inplace=True)
apps['Current Ver'].fillna('Unknown', inplace=True)
apps['Android Ver'].fillna('Unknown', inplace=True)

user_reviews['Translated_Review'].fillna('', inplace=True)
user_reviews['Sentiment'].fillna('Neutral', inplace=True)
user_reviews['Sentiment_Polarity'].fillna(0, inplace=True)
user_reviews['Sentiment_Subjectivity'].fillna(0, inplace=True)

"""Category Exploration"""

category_count = apps['Category'].value_counts()

plt.figure(figsize=(12, 8))
sns.barplot(y=category_count.index, x=category_count.values, palette='viridis')
plt.title('Distribution of Apps across Categories')
plt.xlabel('Number of Apps')
plt.ylabel('Category')
plt.show()

"""Metrics Analysis"""

plt.figure(figsize=(10, 6))
sns.histplot(apps['Rating'], bins=20, kde=True)
plt.title('Distribution of App Ratings')
plt.xlabel('Rating')
plt.ylabel('Number of Apps')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(apps['Size'], bins=20, kde=True)
plt.title('Distribution of App Sizes (MB)')
plt.xlabel('Size (MB)')
plt.ylabel('Number of Apps')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(apps['Installs'], bins=20, kde=True)
plt.title('Distribution of App Installs')
plt.xlabel('Number of Installs')
plt.ylabel('Number of Apps')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(apps[apps['Price'] > 0]['Price'], bins=20, kde=True)
plt.title('Distribution of App Prices')
plt.xlabel('Price ($)')
plt.ylabel('Number of Apps')
plt.show()

"""Sentiment Analysis"""

sentiment_count = user_reviews['Sentiment'].value_counts()

plt.figure(figsize=(8, 6))
sns.barplot(x=sentiment_count.index, y=sentiment_count.values, palette='viridis')
plt.title('Distribution of User Sentiments')
plt.xlabel('Sentiment')
plt.ylabel('Number of Reviews')
plt.show()

fig = px.scatter(apps, x='Size', y='Rating', color='Category',
                 title='Ratings vs. Size of Apps',
                 labels={'Size': 'Size (MB)', 'Rating': 'Rating'},
                 hover_data=['App'])
fig.show()

fig = px.bar(category_count, x=category_count.index, y=category_count.values,
             title='App Installs by Category',
             labels={'index': 'Category', 'value': 'Number of Installs'})
fig.show()

"""Summary

The code analyzes Google Play Store data to uncover insights into the Android app market. It begins by loading and preparing the datasets, ensuring data accuracy through cleaning and type conversion. The analysis explores app distribution across categories with a bar plot and examines metrics such as ratings, size, installs, and pricing trends using histograms. Sentiment analysis is conducted through user reviews, visualized with bar plots and scatter plots to show relationships between app size and ratings. Interactive visualizations are created using Plotly, enhancing the presentation of findings. Overall, the code effectively meets the project requirements while employing data analytics and visualization techniques.
"""