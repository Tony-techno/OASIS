# -*- coding: utf-8 -*-
"""OASIS_InfoByte_Fraud_Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/119UEDihC_HsWqS1YOlxkLEKEsMO2cKdC

#**Fraud Detection**
"""

import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
from sklearn.ensemble import IsolationForest
from imblearn.over_sampling import SMOTE

"""Loading the Dataset"""

creditcard = pd.read_csv('/content/creditcard.csv')

"""Basic Exploration

Shape of the Dataset
"""

print(creditcard.shape)

"""Information about the Dataset"""

print(creditcard.info())

"""Descriptive Statistics"""

print(creditcard.describe())

"""Data Types"""

print(creditcard.dtypes)

print(creditcard.head())

"""Missing Values"""

print(creditcard.tail())

print(creditcard.isnull())

print(creditcard.isnull().sum())

print(creditcard.isnull().sum().sum())

creditcard_cleaned = creditcard.fillna(creditcard.mean())

"""Feature Engineering"""

creditcard_cleaned['Hour'] = creditcard_cleaned['Time'] // 3600 % 24

"""Data Splitting"""

X = creditcard_cleaned.drop('Class', axis=1)
y = creditcard_cleaned['Class']

y = y.astype(int)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Handling Class Imbalance using SMOTE"""

print(y_train.value_counts())

smote = SMOTE(k_neighbors=1)

X_resampled, y_resampled = smote.fit_resample(X_train, y_train)

print(y_resampled.value_counts())

"""Enhanced Anomaly Detection Example"""

iso_forest = IsolationForest(contamination=0.01)
creditcard_cleaned['anomaly'] = iso_forest.fit_predict(X)

"""Model Training with Hyperparameter Tuning"""

param_grid = {'C': [0.01, 0.1, 1, 10, 100]}
grid_search = GridSearchCV(LogisticRegression(), param_grid, cv=5)
grid_search.fit(X_resampled, y_resampled)

best_model = grid_search.best_estimator_

"""Model Evaluation"""

y_proba = best_model.predict_proba(X_test)[:, 1]

"""Convert probabilities to binary predictions with a threshold of 0.5"""

y_pred = (y_proba > 0.5).astype(int)

"""Use binary predictions for classification report and confusion matrix"""

print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))

"""Use probabilities for roc_auc_score"""

print(roc_auc_score(y_test, y_proba))

"""Summary

The code implements a comprehensive fraud detection system using logistic regression on a credit card transaction dataset. It begins by loading the dataset and performing basic exploration, including checking its shape, information, and missing values. After handling missing values, the code applies feature engineering to create a new Hour feature. The dataset is then split into training and testing sets, and SMOTE is used to address class imbalance in the training data. An anomaly detection technique is applied using Isolation Forest to identify unusual patterns. The model is trained with hyperparameter tuning using grid search to optimize its performance. Finally, the model is evaluated using predictions on the test set, generating a classification report, confusion matrix, and ROC AUC score to assess its effectiveness in distinguishing between legitimate and fraudulent transactions.
"""