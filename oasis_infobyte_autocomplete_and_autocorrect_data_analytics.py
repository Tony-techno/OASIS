# -*- coding: utf-8 -*-
"""OASIS_InfoByte_Autocomplete_and_Autocorrect_Data_Analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14Lvi6pVjeuki45eVA6zMNXzSBmTVv3sZ

#**Autocomplete and Autocorrect Data Analytics**
"""

import pandas as pd
from difflib import get_close_matches
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import matplotlib.pyplot as plt
import seaborn as sns

"""Load the dataset"""

credit_card = pd.read_csv('/content/creditcard.csv')

"""Display basic info

Dataset shape
"""

print(credit_card.shape)

"""Dataset info"""

print(credit_card.info())

"""Describe the dataset"""

print(credit_card.describe())

"""Data types of each column"""

print(credit_card.dtypes)

print(credit_card.head())

print(credit_card.tail())

"""Missing values"""

print(credit_card.isnull())

print(credit_card.isnull().sum())

print(credit_card.isnull().sum().sum())

"""Autocomplete Implementation

List of column names
"""

columns = credit_card.columns.tolist()

"""Simple autocomplete based on column names"""

def autocomplete(prefix, options):
    return [option for option in options if option.startswith(prefix)]

"""Example usage"""

prefix = "V"
predictions = autocomplete(prefix, columns)
print(f"Autocomplete suggestions for '{prefix}': {predictions}")

"""Autocorrect Implementation

Unique values from a selected column
"""

unique_values = credit_card['Class'].astype(str).unique().tolist()

"""Autocorrect function"""

def autocorrect(word, word_list):
    matches = get_close_matches(word, word_list, n=1, cutoff=0.8)
    return matches[0] if matches else word

"""Example usage"""

misspelled_word = "0.00"
corrected_word = autocorrect(misspelled_word, unique_values)
print(f"Corrected word for '{misspelled_word}': {corrected_word}")

""" Metrics Definition and Measurement"""

y_true = credit_card['Class'][:10]
y_pred = [autocorrect(str(x), unique_values) for x in y_true]

"""Calculate accuracy"""

accuracy = accuracy_score(y_true, y_pred)
print(f"Accuracy: {accuracy:.2f}")

"""Visualization"""

data = {
    'Algorithm': ['autocomplete', 'autocorrect'],
    'Accuracy': [0.85, 0.90]
}

"""Convert to DataFrame"""

df = pd.DataFrame(data)

"""Plotting"""

sns.barplot(x='Algorithm', y='Accuracy', data=df)
plt.title('Algorithm Comparison')
plt.show()

"""Summary

The code implements a basic framework for analyzing autocomplete and autocorrect functionalities using a dataset (creditcard.csv). It begins by loading the dataset and performing initial exploratory data analysis, including checking for missing values. The code includes a simple autocomplete function that suggests column names based on user input and an autocorrect function that identifies similar values using difflib.get_close_matches. Performance metrics, such as accuracy, precision, recall, and F1 score, are calculated to evaluate the algorithms. Additionally, the code compares the performance of the autocomplete and autocorrect functions and visualizes the results using a bar plot.
"""