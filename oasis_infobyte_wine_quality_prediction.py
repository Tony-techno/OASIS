# -*- coding: utf-8 -*-
"""OASIS_InfoByte_Wine_Quality_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Iw6GoNfAP9H4j-AhdtZbaPn0ILEbSqA2

#**Wine Quality Prediction**

Importing libraries and data loading
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score
from sklearn.linear_model import SGDClassifier
from sklearn.svm import SVC

wine_qt = pd.read_csv('/content/WineQT.csv')

print(wine_qt.info())

print(wine_qt.describe())

print(wine_qt.dtypes)

print(wine_qt.head())

print(wine_qt.tail())

"""Checking for Missing Values"""

print(wine_qt.isnull())

print(wine_qt.isnull().sum())

print(wine_qt.isnull().sum().sum())

"""Exploratory Data Analysis (EDA)

Correlation matrix
"""

plt.figure(figsize=(12, 8))
sns.heatmap(wine_qt.corr(), annot=True, fmt=".2f")
plt.show()

"""Distribution of the target variable"""

sns.countplot(x='quality', data=wine_qt)
plt.show()

"""Feature Engineering

Normalization/Standardization: Scale features to have zero mean and unit variance
"""

features = wine_qt.drop(['quality', 'Id'], axis=1)
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

"""Feature Selection: Select important features based on correlation analysis or feature importance from tree-based models.

Split Data
"""

X = scaled_features
y = wine_qt['quality']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Train Classifier Models

Random Forest
"""

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)
print(classification_report(y_test, y_pred_rf))
print("Random Forest Accuracy:", accuracy_score(y_test, y_pred_rf))

"""Stochastic Gradient Descent (SGD)"""

sgd_model = SGDClassifier(max_iter=1000, tol=1e-3, random_state=42)
sgd_model.fit(X_train, y_train)
y_pred_sgd = sgd_model.predict(X_test)
print(classification_report(y_test, y_pred_sgd))
print("SGD Accuracy:", accuracy_score(y_test, y_pred_sgd))

"""Support Vector Classifier (SVC)"""

svc_model = SVC(kernel='linear', random_state=42)
svc_model.fit(X_train, y_train)
y_pred_svc = svc_model.predict(X_test)
print(classification_report(y_test, y_pred_svc))
print("SVC Accuracy:", accuracy_score(y_test, y_pred_svc))

"""Summary

The code implements a wine quality prediction model using machine learning techniques. It begins by importing necessary libraries such as Pandas, Seaborn, and Scikit-learn. The dataset is loaded and explored for missing values and basic statistics. An exploratory data analysis (EDA) is conducted, including a correlation matrix and the distribution of the target variable. Features are standardized for better model performance. Three classifiers—Random Forest, Stochastic Gradient Descent, and Support Vector Classifier—are trained and evaluated using a train-test split, with classification reports and accuracy scores reported for each model. The code sets a solid foundation for further analysis, such as hyperparameter tuning and model comparison.
"""