# -*- coding: utf-8 -*-
"""OASIS_Infobyte_Exploratory_Data_Analysis_(EDA)_on_Retail_Sales_Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w6rmAbn5-RYH3GrymD30KyrgOYZYM6TD

#**Exploratory Data Analysis (EDA) on Retail Sales Data**

##Import Libraries and Load Dataset
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

retail_sales_data = pd.read_csv('/content/retail_sales_dataset.csv')

menu = pd.read_csv('/content/menu.csv')

"""##Initial Data Examination

###Checking Data Types and Missing Values
"""

# Check the data types and count of non-null values
print(retail_sales_data.info())

# Check the data types and count of non-null values
print(menu.info())

"""###Descriptive Statistics"""

# Display basic statistical details
print(retail_sales_data.describe())

# Display basic statistical details
print(menu.describe())

"""Check the data types of the columns"""

print(retail_sales_data.dtypes)

print(menu.dtypes)

print(retail_sales_data.head())

print(retail_sales_data.tail())

print(menu.head())

print(menu.tail())

"""###Check for missing values"""

print(retail_sales_data.isnull())

print(retail_sales_data.isnull().sum())

print(retail_sales_data.isnull().sum().sum())

print(menu.isnull())

print(menu.isnull().sum())

print(menu.isnull().sum().sum())

"""##Data Visualization"""

# Convert 'Date' column to datetime format
retail_sales_data['Date'] = pd.to_datetime(retail_sales_data['Date'])

plt.figure(figsize=(12, 6))
sns.lineplot(x='Date', y='Total Amount', data=retail_sales_data)
plt.title('Total Sales Over Time')
plt.xlabel('Date')
plt.ylabel('Total Amount')
plt.show()

plt.figure(figsize=(12, 6))
sns.boxplot(x='Product Category', y='Total Amount', data=retail_sales_data)
plt.title('Sales Distribution by Product Category')
plt.xlabel('Product Category')
plt.ylabel('Total Amount')
plt.show()

plt.figure(figsize=(12, 6))
sns.boxplot(x='Gender', y='Total Amount', data=retail_sales_data)
plt.title('Sales Distribution by Gender')
plt.xlabel('Gender')
plt.ylabel('Total Amount')
plt.show()

"""###Customer Age Analysis"""

plt.figure(figsize=(12, 6))
sns.histplot(retail_sales_data['Age'], bins=30, kde=True)
plt.title('Customer Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(12, 6))
sns.scatterplot(x='Age', y='Total Amount', data=retail_sales_data)
plt.title('Age vs. Total Amount Spent')
plt.xlabel('Age')
plt.ylabel('Total Amount')
plt.show()

"""###Quantity and Price Analysis"""

plt.figure(figsize=(12, 6))
sns.histplot(retail_sales_data['Quantity'], bins=30, kde=True)
plt.title('Quantity Distribution')
plt.xlabel('Quantity')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(12, 6))
sns.histplot(retail_sales_data['Price per Unit'], bins=30, kde=True)
plt.title('Price per Unit Distribution')
plt.xlabel('Price per Unit')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(12, 6))
sns.histplot(retail_sales_data['Total Amount'], bins=30, kde=True)
plt.title('Total Amount Distribution')
plt.xlabel('Total Amount')
plt.ylabel('Frequency')
plt.show()

"""###Analyze the categorical features"""

# Gender distribution
print(retail_sales_data['Gender'].value_counts())

# Product Category distribution
print(retail_sales_data['Product Category'].value_counts())

"""##Correlation Analysis

###Exclude non-numeric columns
"""

numerical_columns = retail_sales_data.select_dtypes(include=['int64', 'float64']).columns

"""###Compute the correlation matrix"""

correlation_matrix = retail_sales_data[numerical_columns].corr()

sns.heatmap(correlation_matrix, annot=True, cmap='YlOrRd')
plt.title('Correlation Matrix')
plt.show()

plt.figure(figsize=(12, 6))
sns.scatterplot(x='Quantity', y='Total Amount', data=retail_sales_data)
plt.title('Total Amount vs. Quantity')
plt.xlabel('Quantity')
plt.ylabel('Total Amount')
plt.show()

"""Analyze the distribution of nutritional values"""

plt.figure(figsize=(12, 6))
sns.histplot(menu['Calories'], bins=30, kde=True)
plt.title('Distribution of Calories')
plt.xlabel('Calories')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(12, 6))
sns.histplot(menu['Sodium'], bins=30, kde=True)
plt.title('Distribution of Sodium')
plt.xlabel('Sodium (mg)')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(12, 6))
sns.histplot(menu['Carbohydrates'], bins=30, kde=True)
plt.title('Distribution of Carbohydrates')
plt.xlabel('Carbohydrates (g)')
plt.ylabel('Frequency')
plt.show()

numerical_columns = menu.select_dtypes(include=['int64', 'float64']).columns

correlation_matrix = menu[numerical_columns].corr()

# Correlation matrix
plt.figure(figsize=(16, 12))
sns.heatmap(menu[numerical_columns].corr(), annot=True, cmap='YlOrRd')
plt.title('Correlation Matrix of Nutritional Values')
plt.show()

"""Summary

The code performs Exploratory Data Analysis (EDA) on a retail sales dataset and a menu dataset. It starts by importing necessary libraries and loading the datasets. It checks data types, counts non-null values, and calculates basic statistics. The code examines the initial data, displays the head and tail of the datasets, and checks for missing values. For visualization, it plots total sales over time, sales distribution by product category and gender, and analyzes customer age distribution and its relationship with the total amount spent. It also explores the distribution of quantity, price per unit, and total amount. Categorical features like gender and product category are analyzed, and a correlation analysis is conducted to understand relationships between numerical variables. The code also examines the distribution and correlations of nutritional values in the menu dataset. Finally, it summarizes the analysis steps and provides actionable recommendations based on the insights gained.
"""